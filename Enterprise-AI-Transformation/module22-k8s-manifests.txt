# Kubernetes manifests for Super Challenge deployment
# Deploy with: kubectl apply -f k8s/

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: super-challenge
  labels:
    name: super-challenge
    module: "22"

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: super-challenge
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  EVENT_HUB_NAME: "transactions"
  COSMOS_DATABASE: "analytics"
  ENABLE_FRAUD_CHECK: "true"
  ENABLE_REAL_TIME_ANALYTICS: "true"
  ENABLE_AI_ENHANCEMENT: "true"
  MAX_CONCURRENT_TRANSACTIONS: "1000"
  CACHE_TTL_SECONDS: "300"
  CONNECTION_POOL_SIZE: "20"

---
# Secret for sensitive data (use Azure Key Vault in production)
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: super-challenge
type: Opaque
stringData:
  DATABASE_URL: "postgresql://psqladmin:password@psql-server:5432/transactions"
  REDIS_URL: "redis://:password@redis-server:6379"
  AZURE_OPENAI_ENDPOINT: "https://your-openai.openai.azure.com/"
  AZURE_OPENAI_KEY: "your-key-here"
  EVENT_HUB_CONNECTION_STRING: "your-connection-string"
  COSMOS_CONNECTION_STRING: "your-cosmos-connection-string"
  APPLICATIONINSIGHTS_CONNECTION_STRING: "your-appinsights-connection-string"

---
# ServiceAccount for workload identity
apiVersion: v1
kind: ServiceAccount
metadata:
  name: workload-identity-sa
  namespace: super-challenge
  annotations:
    azure.workload.identity/client-id: "your-managed-identity-client-id"

---
# Transaction Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transaction-service
  namespace: super-challenge
  labels:
    app: transaction-service
    version: v2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: transaction-service
  template:
    metadata:
      labels:
        app: transaction-service
        version: v2
        azure.workload.identity/use: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: workload-identity-sa
      nodeSelector:
        "nodepool-type": "workload"
      containers:
      - name: transaction-service
        image: acrsuperchallenge.azurecr.io/transaction-service:v2.0.0
        ports:
        - containerPort: 8001
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_NAME
          value: "transaction-service"
        - name: PORT
          value: "8001"
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets"
          readOnly: true
      volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: azure-keyvault

---
# Transaction Service
apiVersion: v1
kind: Service
metadata:
  name: transaction-service
  namespace: super-challenge
  labels:
    app: transaction-service
spec:
  type: ClusterIP
  selector:
    app: transaction-service
  ports:
  - port: 80
    targetPort: 8001
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics

---
# Fraud Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-service
  namespace: super-challenge
  labels:
    app: fraud-service
    version: v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fraud-service
  template:
    metadata:
      labels:
        app: fraud-service
        version: v2
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: workload-identity-sa
      nodeSelector:
        "nodepool-type": "workload"
      containers:
      - name: fraud-service
        image: acrsuperchallenge.azurecr.io/fraud-service:v2.0.0
        ports:
        - containerPort: 8002
          name: http
        env:
        - name: SERVICE_NAME
          value: "fraud-service"
        - name: PORT
          value: "8002"
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 45
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 5

---
# Fraud Service
apiVersion: v1
kind: Service
metadata:
  name: fraud-service
  namespace: super-challenge
spec:
  type: ClusterIP
  selector:
    app: fraud-service
  ports:
  - port: 80
    targetPort: 8002

---
# Analytics Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: super-challenge
  labels:
    app: analytics-service
    version: v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      labels:
        app: analytics-service
        version: v2
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: workload-identity-sa
      nodeSelector:
        "nodepool-type": "workload"
      containers:
      - name: analytics-service
        image: acrsuperchallenge.azurecr.io/analytics-service:v2.0.0
        ports:
        - containerPort: 8003
          name: http
        - containerPort: 8003
          name: websocket
        env:
        - name: SERVICE_NAME
          value: "analytics-service"
        - name: PORT
          value: "8003"
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 20
          periodSeconds: 5

---
# Analytics Service
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: super-challenge
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  selector:
    app: analytics-service
  ports:
  - port: 80
    targetPort: 8003
    name: http
  - port: 8003
    targetPort: 8003
    name: websocket

---
# Dashboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  namespace: super-challenge
  labels:
    app: dashboard
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      labels:
        app: dashboard
        version: v1
    spec:
      containers:
      - name: dashboard
        image: acrsuperchallenge.azurecr.io/dashboard:v1.0.0
        ports:
        - containerPort: 80
          name: http
        env:
        - name: REACT_APP_API_URL
          value: "http://transaction-service"
        - name: REACT_APP_WS_URL
          value: "ws://analytics-service:8003/ws/metrics"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: dashboard
  namespace: super-challenge
spec:
  type: ClusterIP
  selector:
    app: dashboard
  ports:
  - port: 80
    targetPort: 80

---
# Horizontal Pod Autoscalers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: transaction-service-hpa
  namespace: super-challenge
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: transaction-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fraud-service-hpa
  namespace: super-challenge
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fraud-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70

---
# Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
  namespace: super-challenge
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
spec:
  tls:
  - hosts:
    - api.superchallenge.azure.com
    - dashboard.superchallenge.azure.com
    secretName: api-tls
  rules:
  - host: api.superchallenge.azure.com
    http:
      paths:
      - path: /api/v1/transactions
        pathType: Prefix
        backend:
          service:
            name: transaction-service
            port:
              number: 80
      - path: /api/v1/fraud
        pathType: Prefix
        backend:
          service:
            name: fraud-service
            port:
              number: 80
      - path: /api/v1/analytics
        pathType: Prefix
        backend:
          service:
            name: analytics-service
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: analytics-service
            port:
              number: 8003
  - host: dashboard.superchallenge.azure.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dashboard
            port:
              number: 80

---
# Network Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: transaction-service-network-policy
  namespace: super-challenge
spec:
  podSelector:
    matchLabels:
      app: transaction-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: super-challenge
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8001
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: super-challenge
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 8002
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS for external APIs

---
# Pod Disruption Budgets
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: transaction-service-pdb
  namespace: super-challenge
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: transaction-service

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fraud-service-pdb
  namespace: super-challenge
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: fraud-service

---
# Secrets Provider Class for Azure Key Vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-keyvault
  namespace: super-challenge
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"
    userAssignedIdentityID: "your-managed-identity-client-id"
    keyvaultName: "kv-superchallenge"
    cloudName: "AzurePublicCloud"
    objects: |
      array:
        - |
          objectName: postgresql-connection-string
          objectType: secret
        - |
          objectName: redis-connection-string
          objectType: secret
        - |
          objectName: cosmos-connection-string
          objectType: secret
        - |
          objectName: eventhub-connection-string
          objectType: secret
        - |
          objectName: openai-key
          objectType: secret
        - |
          objectName: application-insights-key
          objectType: secret
    tenantId: "your-tenant-id"

---
# Prometheus ServiceMonitor (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: transaction-service-monitor
  namespace: super-challenge
spec:
  selector:
    matchLabels:
      app: transaction-service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Jobs for database migration
apiVersion: batch/v1
kind: Job
metadata:
  name: database-migration
  namespace: super-challenge
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: migrate
        image: acrsuperchallenge.azurecr.io/db-migration:v1.0.0
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DATABASE_URL
        command:
        - sh
        - -c
        - |
          echo "Running database migrations..."
          python manage.py migrate
          echo "Migrations completed!"

---
# CronJob for cleanup
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-old-transactions
  namespace: super-challenge
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: cleanup
            image: acrsuperchallenge.azurecr.io/cleanup-job:v1.0.0
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_URL
            command:
            - python
            - cleanup_old_transactions.py
            - --days=90